一个公钥同时使用于GitHub和Gitee平台！
origin/main：指的是远程分支的分支名称为main，在以前叫master，因为受到“Black Lives Matter”运动和民众情绪的影响，所以推荐改主分支名

把token直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入token了：
git remote set-url origin https://填写你的密钥@github.com/2690085099/vue3_project.git
git remote set-url origin https://gitee.com/HYY2690085099/vue3_project.gitgit
<your_token>：换成你自己得到的token
<USERNAME>：是你自己github的用户名
<REPO>：是你的仓库名称

“git add .”：能够将项目下所有未提交到暂存区的文件提交
“git commit -m "本次提交的描述内容" ”：将暂存区的内容提交到本地仓库
“git restore .”：丢弃更改所有更改，如果“.”换成文件名，就是丢弃某个文件的更改
“git push”：将修改推送到远程仓库（如GitHub、Gitee等）

“git remote set-url origin 仓库Git地址”：切换当前Git命令所操作的远程仓库
“git checkout -b 分支名”：新建分支，并切换到新的分支
“git merge 分支名”：合并指定分支到当前分支
“git branch -d 分支名”：删除分支
“git checkout 分支名”：切换到指定分支
“git push origin --delete 分支名”+“git branch -dr 分支名”：删除远程分支

“git status”：可以查看当前状态
“git branch -a”：查看所有分支，白色字体为本地分支，红色字体为远程仓库分支，前面带星号的为当前分支
“git branch“：查看本地仓库的分支——“git branch -r”：查看远程仓库的分支
“git branch 分支名”：新建分支，但依然停留在当前分支
“git remote -v”：查看远程仓库的地址

在不同的机器上做提交的情况：
远程分支上存在本地分支中不存在的提交，往往是多人协作开发过程中遇到的问题，可以先fetch再merge，也就是pull，把远程分支上的提交合并到本地分支之后再push。
如果你确定远程分支上那些提交都不需要了，那么直接git push origin master -f，强行让本地分支覆盖远程分支

将子分支合并到主分支：
先切换到主分支：git checkout 主分支名称
然后最好拉取主分支最新的代码：git pull
然后将子分支合并到当前分支（主分支）：git merge 子分支名称

（故意修改错的）